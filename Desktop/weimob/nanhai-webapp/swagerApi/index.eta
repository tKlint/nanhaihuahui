<%
const { groups } = it;
const groupApi = groups.map(group => group.join('').replace(/^./, m => m.toUpperCase()))
const API = groupApi.join(' & ')
%>
<% if (groups && groups.length) { %>
<% groups.forEach(function(group, index){ %>
import { API as <%~ groupApi[index] %> } from "./<%~ group.join('/') %>"
<% }) %>

type Parameters<T> = T extends (...args: infer T) => any ? T : never;

export const api = {
<% groups.forEach(function(group, index){ %>
  <%~ group.join('') %>: <%= groupApi[index] %><%= index === groups.length - 1 ? '\n' : ',\n' %>
<% }) %>
}

export function apiFn<A extends typeof api, M extends keyof A, U extends keyof A[M]>(module: M, url: U, ...args: Parameters<A[M][U]>): ReturnType<A[M][U]> {
  const moduleApi = (api as any)[module]
  return (moduleApi[url]).apply(moduleApi, args)
}

<% } else { %>
import { API } from './User';

type Parameters<T> = T extends (...args: infer T) => any ? T : never;

export const api = API;

export function apiFn<P extends typeof API, T extends keyof typeof API>(url: T, ...args: Parameters<P[T]>): ReturnType<P[T]> {
  return (api[url] as any).apply(api, args)
}

<% } %>
